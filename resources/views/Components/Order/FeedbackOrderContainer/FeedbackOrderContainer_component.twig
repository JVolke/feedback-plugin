<script type="text/javascript">
    (function($) {
        Vue.component('feedback-order-container', {

            template: '#vue-feedback-order-container',
            delimiters: ["${", "}"],
            props: ['variations', 'items', 'itemUrls', 'itemImages', 'options', 'splitItemBundles', 'accessKey', 'orderId'],

            data: function()
            {
                return {
                    authenticatedUser: {
                        id: 0,
                        isLoggedIn: false,
                        limitReached: {},
                        hasPurchased: {}
                    },
                    isLoading: true,
                    page: 1
                };
            },

            computed: {
                orderItems: function()
                {
                    var aggregate = [];

                    for(var i = 0; i < this.items.length; i++)
                    {
                        if(this.items[i].itemVariationId > 0 && this.items[i].orderItemName.indexOf("[-]") === -1)
                        {
                            var key = this.items[i].itemVariationId;

                            var bundleType = this.variations[key].variation.bundleType;
                            var itemName = this.items[i].orderItemName;

                            aggregate.push({
                                name: this.filterItemName(itemName, bundleType),
                                image: this.itemImages[key],
                                url: this.itemUrls[key],
                                variationId: key,
                                itemId: this.variations[key].item.id
                            });

                            if(bundleType === "bundle" && this.splitItemBundles < 1) // Check itemBundleSplit
                            {
                                for(var j = 0; j < this.items[i].bundleComponents.length; j++)
                                {
                                    var variationId = this.items[i].bundleComponents[j].data.variation.id;

                                    aggregate.push({
                                        name: this.$options.filters.itemName(this.items[i].bundleComponents[j].data),
                                        image: this.itemImages[variationId],
                                        url: this.itemUrls[variationId],
                                        variationId: variationId,
                                        itemId: this.items[i].bundleComponents[j].data.itemId
                                    });
                                }
                            }
                        }
                    }

                    return aggregate;
                },

                pagination: function() {
                    var amount = this.page * this.options.itemsPerRow * this.options.rowsPerPage;
                    return this.orderItems.slice(0, amount);
                },

                trueItemsPerRow: function() {
                    return Math.min(this.orderItems.length, this.options.itemsPerRow);
                }
            },

            mounted: function()
            {
                var _self = this;
                $.when(
                    this.getUser()
                ).done(function() {
                    _self.isLoading = false;
                    Vue.nextTick(function () {
                        // DOM updated
                        window.dispatchEvent(new Event('resize'));
                    })
                });
            },

            methods: {
                getUser: function()
                {
                    // Get array of item and variationIds
                    var itemIds = [];
                    var variationIds = [];

                    for (var i = 0; i < this.orderItems.length; i++)
                    {
                        var orderItem = this.orderItems[i];
                        itemIds.push(orderItem.itemId);
                        variationIds.push(orderItem.variationId);
                    }
                    var data = {
                      "itemIds": itemIds,
                      "variationIds": variationIds,
                      "allowFeedbacksOnlyIfPurchased": false,
                      "numberOfFeedbacks": this.options.numberOfFeedbacks
                    };

                    if(this.orderId && this.accessKey)
                    {
                        data['orderId'] = this.orderId;
                        data['accessKey'] = this.accessKey;
                    }

                    var _self = this;
                    return $.ajax({
                        type:           'GET',
                        url:            '/rest/feedbacks/user',
                        data:           data,
                        success:        function(data)
                        {
                            _self.authenticatedUser = data;
                        },
                        error:          function(jqXHR, textStatus, errorThrown)
                        {
                            console.error(errorThrown);
                        }
                    });
                },

                nextPage: function()
                {
                    var amount = this.page * this.options.itemsPerRow * this.options.rowsPerPage;

                    if(amount < this.orderItems.length) {
                        this.page += 1;
                    }
                },

                filterItemName: function(itemName, bundleType)
                {
                    if(bundleType === "bundle")
                    {
                        return itemName.replace("[BUNDLE]", "");
                    }

                    if(bundleType === "bundle_item")
                    {
                        return itemName.replace("[-]", "");
                    }

                    return itemName;
                }
            }
        });
    })(jQuery);
</script>
